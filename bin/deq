#! /usr/bin/env perl

use v5.12;
use warnings;

use FindBin;
use local::lib $FindBin::Bin =~ s{/bin$}{/local-lib}r;
use lib $FindBin::Bin =~ s{/bin$}{/lib}r;

use Try::Tiny;

use autodie qw/ :all /; # Needs the local::lib

use Getopt::Long;

use JCC::Queue::Schema;

my $schema = JCC::Queue::Schema->connect(qq{dbi:SQLite:dbname=$ENV{HOME}/queue.db});

GetOptions(
    'c|category=s' => \my $category,
) or die "Error in command line arguments";

my $url = $schema->resultset('Item')
    ->search({ category => $category, })
    ->order_by('id')
    ->limit(1)
    ->single()
;

if ($url) {
    if ($url->url =~ m{^\Qhttps://www.youtube.com/watch?}) {
        pipe my $in, my $out;
        my $pid = fork();
        if (!$pid) { # child process (youtube-dl)
            open STDOUT, '>&', $out;
            exec q{youtube-dl}, q{--no-playlist}, $url->url, q{-o}, q{-};
        } else { # parent process (mplayer)
            open my $fh, '<&', \*STDIN;
            open STDIN, '<&', $in;
            system q{mplayer}, '-quiet', '-nolirc', q{-};
            open STDIN, '<&', $fh;
            waitpid($pid, 0);
        }
    } elsif ($url->url =~ m/^https?:/) {
        system q{browse}, $url->url;
    } elsif ($url->url =~ m/\.mp3$/) {
        system q{mplayer}, '-quiet', '-nolirc', $url->url;
    } elsif ($url->url =~ m/\.ogg$/) {
        system q{mplayer}, '-quiet', '-nolirc', $url->url;
    } else {
        say $url->url;
    }
    $url->delete();
}
